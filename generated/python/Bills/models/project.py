# coding: utf-8

"""
    Bill Events API

    API for bill-related events, including project, line items, approval, and metadata.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    project_id: StrictStr = Field(alias="projectId")
    project_name: StrictStr = Field(alias="projectName")
    lot_type: StrictStr = Field(alias="lotType")
    project_status: StrictStr = Field(alias="projectStatus")
    warranty_start_date: Optional[date] = Field(default=None, description="ISO 8601 date format (YYYY-MM-DD)", alias="warrantyStartDate")
    vertical_completion_date: Optional[date] = Field(default=None, description="ISO 8601 date format (YYYY-MM-DD)", alias="verticalCompletionDate")
    __properties: ClassVar[List[str]] = ["projectId", "projectName", "lotType", "projectStatus", "warrantyStartDate", "verticalCompletionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if warranty_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.warranty_start_date is None and "warranty_start_date" in self.model_fields_set:
            _dict['warrantyStartDate'] = None

        # set to None if vertical_completion_date (nullable) is None
        # and model_fields_set contains the field
        if self.vertical_completion_date is None and "vertical_completion_date" in self.model_fields_set:
            _dict['verticalCompletionDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "projectId": obj.get("projectId"),
            "projectName": obj.get("projectName"),
            "lotType": obj.get("lotType"),
            "projectStatus": obj.get("projectStatus"),
            "warrantyStartDate": obj.get("warrantyStartDate"),
            "verticalCompletionDate": obj.get("verticalCompletionDate")
        })
        return _obj


