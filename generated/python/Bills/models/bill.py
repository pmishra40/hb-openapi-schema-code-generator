# coding: utf-8

"""
    Bill Events API

    API for bill-related events, including project, line items, approval, and metadata.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Bill(BaseModel):
    """
    Bill
    """ # noqa: E501
    bill_id: StrictStr = Field(alias="billId")
    bill_number: StrictStr = Field(alias="billNumber")
    trade_partner_bill_number: StrictStr = Field(alias="tradePartnerBillNumber")
    trade_partner_id: StrictStr = Field(alias="tradePartnerId")
    trade_partner_name: Optional[StrictStr] = Field(default=None, alias="tradePartnerName")
    bill_type: StrictStr = Field(alias="billType")
    bill_source: StrictStr = Field(alias="billSource")
    bill_date: date = Field(description="ISO 8601 date format (YYYY-MM-DD)", alias="billDate")
    bill_status: StrictStr = Field(alias="billStatus")
    total_amount_in_cents: StrictInt = Field(alias="totalAmountInCents")
    is_trade_partner_credit: Optional[StrictBool] = Field(default=None, alias="isTradePartnerCredit")
    payment_terms: Optional[StrictStr] = Field(default=None, alias="paymentTerms")
    due_date: Optional[date] = Field(default=None, description="ISO 8601 date format (YYYY-MM-DD)", alias="dueDate")
    amount_paid_in_cents: Optional[StrictInt] = Field(default=None, alias="amountPaidInCents")
    paid_date: Optional[date] = Field(default=None, description="ISO 8601 date format (YYYY-MM-DD)", alias="paidDate")
    external_system_bill_id: Optional[StrictStr] = Field(default=None, alias="externalSystemBillId")
    reversal_bill_id: Optional[StrictStr] = Field(default=None, alias="reversalBillId")
    posted_date: Optional[date] = Field(default=None, description="ISO 8601 date format (YYYY-MM-DD)", alias="postedDate")
    __properties: ClassVar[List[str]] = ["billId", "billNumber", "tradePartnerBillNumber", "tradePartnerId", "tradePartnerName", "billType", "billSource", "billDate", "billStatus", "totalAmountInCents", "isTradePartnerCredit", "paymentTerms", "dueDate", "amountPaidInCents", "paidDate", "externalSystemBillId", "reversalBillId", "postedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if paid_date (nullable) is None
        # and model_fields_set contains the field
        if self.paid_date is None and "paid_date" in self.model_fields_set:
            _dict['paidDate'] = None

        # set to None if reversal_bill_id (nullable) is None
        # and model_fields_set contains the field
        if self.reversal_bill_id is None and "reversal_bill_id" in self.model_fields_set:
            _dict['reversalBillId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billId": obj.get("billId"),
            "billNumber": obj.get("billNumber"),
            "tradePartnerBillNumber": obj.get("tradePartnerBillNumber"),
            "tradePartnerId": obj.get("tradePartnerId"),
            "tradePartnerName": obj.get("tradePartnerName"),
            "billType": obj.get("billType"),
            "billSource": obj.get("billSource"),
            "billDate": obj.get("billDate"),
            "billStatus": obj.get("billStatus"),
            "totalAmountInCents": obj.get("totalAmountInCents"),
            "isTradePartnerCredit": obj.get("isTradePartnerCredit"),
            "paymentTerms": obj.get("paymentTerms"),
            "dueDate": obj.get("dueDate"),
            "amountPaidInCents": obj.get("amountPaidInCents"),
            "paidDate": obj.get("paidDate"),
            "externalSystemBillId": obj.get("externalSystemBillId"),
            "reversalBillId": obj.get("reversalBillId"),
            "postedDate": obj.get("postedDate")
        })
        return _obj


