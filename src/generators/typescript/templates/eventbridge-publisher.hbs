import { EventBridge } from '@aws-sdk/client-eventbridge';
import { fromSSO } from '@aws-sdk/credential-providers';
import { {{name}} } from '{{importPath}}/{{name}}';
import { ObjectSerializer } from '{{importPath}}/ObjectSerializer';

interface PublisherConfig {
    region?: string;
    profile?: string;
    eventBusName?: string;
    source?: string;
}

/**
 * EventBridge publisher for {{name}}
 * Generated by OpenAPI Generator
 */
export class {{name}}Publisher {
    private eventBridge: EventBridge;
    private eventBusName: string;
    private source: string;

    constructor(config: PublisherConfig = {}) {
        this.eventBridge = new EventBridge({
            region: config.region || process.env.AWS_REGION || 'us-west-2',
            credentials: fromSSO({ profile: config.profile || process.env.AWS_PROFILE })
        });
        this.eventBusName = config.eventBusName || process.env.EVENT_BUS_NAME || 'homebound-events';
        this.source = config.source || process.env.EVENT_SOURCE || 'com.homebound.{{toLowerCase name}}';
    }

    /**
     * Publishes an event to EventBridge
     * @param event The event payload
     * @param detailType The event type for EventBridge DetailType
     * @returns EventBridge PutEvents response
     */
    async publish(event: {{name}}, detailType: string): Promise<any> {
        const serializedEvent = ObjectSerializer.serialize(event, '{{name}}', 'json');
        
        const params = {
            Entries: [
                {
                    EventBusName: this.eventBusName,
                    Source: this.source,
                    DetailType: detailType,
                    Detail: ObjectSerializer.stringify(serializedEvent, 'application/json')
                }
            ]
        };

        return await this.eventBridge.putEvents(params);
    }
}