import { OpenAPIV3 } from 'openapi-types';
import { execSync } from 'child_process';
import { join } from 'path';
import { readdirSync } from 'fs';
import pino, { Logger } from 'pino';
import { GeneratorOptions } from './types';
import { HandlebarsTemplateRenderer } from './services/template-renderer';
import { FileSystem, NodeFileSystem } from './services/file-system';
import { OpenAPISchemaValidator } from './services/schema-validator';
import { EventBridgeGenerator } from './services/event-generator';

/**
 * Generator class that converts OpenAPI specifications into TypeScript code with EventBridge integration.
 * This class handles the entire process of generating TypeScript code from OpenAPI schemas, including:
 * - Validating the OpenAPI document
 * - Generating TypeScript models
 * - Generating EventBridge publishers and consumers
 * - Cleaning up temporary files and folders
 * 
 * @example
 * ```typescript
 * const generator = new OpenAPITypeScriptGenerator(openApiDoc, {
 *   npmPackageName: '@my-org/schema-registry',
 *   region: 'us-west-2'
 * });
 * await generator.generate('./output');
 * ```
 */
export class OpenAPITypeScriptGenerator {
  /**
   * Configuration for cleanup of generated files and directories.
   * These are files and folders that are generated by the OpenAPI generator
   * but are not needed in our final output.
   */
  private static readonly CLEANUP_CONFIG = {
    files: [
      'git_push.sh', '.gitignore', '.npmignore', '.openapi-generator-ignore',
      'api.ts', 'configuration.ts', 'base.ts', 'common.ts', 'servers.ts',
      'README.md', 'package.json', 'tsconfig.json', '.eslintrc.js',
      'runtime.ts', '.gitattributes', 'index.ts', 'middleware.ts',
      'rxjsStub.ts', 'util.ts'
    ],
    folders: [
      '.openapi-generator', 'apis', 'http', 'auth', 'types'
    ]
  } as const;

  /**
   * Configuration for the OpenAPI Generator CLI.
   * These settings control how the TypeScript code is generated:
   * - Generates only models and supporting files
   * - Uses ES6 features
   * - Preserves original property naming
   * - Disables unnecessary feature generation
   */
  private static readonly OPENAPI_GENERATOR_CONFIG = {
    globalProperty: 'models,supportingFiles',
    additionalProperties: {
      supportsES6: true,
      modelPropertyNaming: 'original',
      withInterfaces: true,
      generateApis: false,
      generateApiDocumentation: false,
      generateModelDocumentation: false,
      generateGitIgnore: false,
      snapshot: false,
      supportsMultipleInheritance: true,
      enumPropertyNaming: 'original',
      removeEnumValuePrefix: true,
      generateClient: false,
      useSingleRequestParameter: true,
      withoutHttpFiles: true,
      useObjectParameters: false
    }
  } as const;

  // Create default pino logger if none provided
  /**
   * Creates a default Pino logger instance with pretty printing enabled.
   * This logger is used if no custom logger is provided in the options.
   * 
   * @returns {Logger} Configured Pino logger instance
   */
  private static createDefaultLogger(): Logger {
    return pino({
      level: 'info',
      transport: {
        target: 'pino-pretty',
        options: {
          colorize: true,
          translateTime: 'SYS:standard'
        }
      }
    });
  }

  private static readonly DEFAULT_OPTIONS: Required<GeneratorOptions> = {
    logger: OpenAPITypeScriptGenerator.createDefaultLogger(),
    npmPackageName: '@homebound/schema-registry',
    npmVersion: '1.0.0',
    region: 'us-west-2',
    eventBusName: 'homebound-events',
    defaultSource: 'com.homebound'
  } as const;

  private readonly logger: Logger;
  private readonly options: Required<GeneratorOptions>;

  /**
   * Creates a new instance of the OpenAPI TypeScript Generator.
   * 
   * @param {OpenAPIV3.Document} document - The OpenAPI document to generate code from
   * @param {GeneratorOptions} options - Optional configuration options
   * @throws {Error} If the OpenAPI document is invalid or missing required fields
   */
  constructor(
    private document: OpenAPIV3.Document,
    options: GeneratorOptions = {}
  ) {
    // Set default options
    this.options = {
      ...OpenAPITypeScriptGenerator.DEFAULT_OPTIONS,
    ...options
    };
    
    this.logger = this.options.logger;

    // Validate the OpenAPI document
    this.validateSchema();
  }

  /**
   * Validates the OpenAPI document structure and required fields.
   * Ensures that the document contains all necessary components for code generation.
   * 
   * @throws {Error} If the document is invalid or missing required fields
   */
  private validateSchema(): void {
    const validator = new OpenAPISchemaValidator(this.logger);
    validator.validate(this.document);
  }

  /**
   * Generates TypeScript code from the OpenAPI document.
   * This is the main method that orchestrates the entire code generation process:
   * 1. Creates output directory
   * 2. Generates TypeScript models using OpenAPI generator
   * 3. Processes generated files to remove unnecessary imports
   * 4. Generates EventBridge integration code
   * 5. Cleans up temporary files
   * 
   * @param {string} outputPath - Directory path where the generated code will be written
   * @throws {Error} If code generation fails at any step
   */
  async generate(outputPath: string): Promise<void> {
    try {
      this.logger.info({ path: outputPath }, 'Starting code generation');
      
      const fileSystem = new NodeFileSystem(this.logger);
  
      // Create output directory if it doesn't exist
      fileSystem.createDirectory(outputPath);
  
      // Write OpenAPI spec to temp file
      const tempSpecPath = join(outputPath, '_temp_spec.json');
      this.logger.debug({ path: tempSpecPath }, 'Writing temporary OpenAPI spec');
      fileSystem.writeFile(tempSpecPath, JSON.stringify(this.document));
  
      // Generate using openapi-generator
      this.logger.info('Running OpenAPI generator');
      const command = `npx @openapitools/openapi-generator-cli generate \
        -i ${tempSpecPath} \
        -g typescript \
        -o ${outputPath} \
        --global-property ${OpenAPITypeScriptGenerator.OPENAPI_GENERATOR_CONFIG.globalProperty} \
        --additional-properties ${this.buildAdditionalProperties()} \
        --skip-validate-spec`;
      execSync(command);
  
      // Process model files to remove HTTP imports
      const modelsPath = join(outputPath, 'models');
      if (fileSystem.exists(modelsPath)) {
        const modelFiles = readdirSync(modelsPath).filter(f => f.endsWith('.ts'));
        this.logger.debug({ fileCount: modelFiles.length }, 'Processing model files');
        
        for (const file of modelFiles) {
          const filePath = join(modelsPath, file);
          this.logger.debug({ file }, 'Removing HTTP imports');
          let content = fileSystem.readFile(filePath);
          content = content.replace(/import \{ HttpFile \} from '\.\.\/http\/http';\n*/g, '');
          fileSystem.writeFile(filePath, content);
        }
      }
  
      // Clean up temp file
      if (fileSystem.exists(tempSpecPath)) {
        this.logger.debug({ path: tempSpecPath }, 'Removing temporary spec file');
        fileSystem.cleanup([tempSpecPath], []);
      }
  
      // Generate EventBridge files
      this.logger.info('Generating EventBridge files');
      await this.generateEventBridgeFiles(outputPath);
  
      // Clean up generated files and folders
      const { files, folders } = OpenAPITypeScriptGenerator.CLEANUP_CONFIG;
      this.logger.debug({ files: files.length, folders: folders.length }, 'Cleaning up generated files');
      
      const filesToClean = files.map(file => join(outputPath, file));
      const foldersToClean = folders.map(folder => join(outputPath, folder));
      fileSystem.cleanup(filesToClean, foldersToClean);
  
      this.logger.info('Code generation completed successfully');
    } catch (error) {
      this.logger.error({ err: error }, 'Failed to generate code');
      throw error;
    }
  }

  /**
   * Builds additional properties string for OpenAPI Generator CLI.
   * Converts the configuration object into a comma-separated string of key=value pairs
   * that can be passed to the CLI tool.
   * 
   * @returns {string} Formatted string of additional properties
   */
  private buildAdditionalProperties(): string {
    const props = {
      ...OpenAPITypeScriptGenerator.OPENAPI_GENERATOR_CONFIG.additionalProperties,
      npmName: this.options.npmPackageName,
      npmVersion: this.options.npmVersion
    };
    return Object.entries(props)
      .map(([key, value]) => `${key}=${value}`)
      .join(',');
  }
  
  /**
   * Generates EventBridge publisher and consumer files for event schemas.
   * Creates TypeScript classes that integrate with AWS EventBridge for event
   * publishing and consumption.
   * 
   * @param {string} outputPath - Directory path where event files will be generated
   * @throws {Error} If EventBridge file generation fails
   */
  private async generateEventBridgeFiles(outputPath: string): Promise<void> {
    const fileSystem = new NodeFileSystem(this.logger);
    const templateRenderer = new HandlebarsTemplateRenderer();
    const eventGenerator = new EventBridgeGenerator(
      templateRenderer,
      fileSystem,
      this.logger,
      this.options,
      this.document
    );

    const schemas = this.document.components?.schemas || {};
    await eventGenerator.generateEventFiles(outputPath, schemas);
  }
}